{"title":"Git Basics","markdown":{"yaml":"---\ntitle: \"Git Basics\"\nbibliography: Workflow.bib\nnocite: |\n  @Atl; @Atl, @zotero-2955, @zotero-2951, @zotero-2954, @zotero-2952  \n---","headingText":"Manage local repo","containsRefs":true,"markdown":"\n\nGit is a distributed version control system. With Git, every developer has the full history of the code repo locally. Github is an Internet host for git repos. Similar hosts include Gitlab, Bitbucket, Gitbucket; and there are many more.\n\nAs we transition to fully open-source programming, with the source mainly consisting of text files, git and github becomes critically important. \n\n\n\n1. Initiate\n\n```bash\ncd /somedir   # navigate to the directory that you want to create the repo\ngit init      # Initiate the git repo\n```\nThis creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.\n\n2. Starting tracking files or Staging modified files\n\n```bash\ngit add somefile  # start tracking some files\n\n# or\n\ngit add --all     # start tracking all files in the directory\n```\n\n\n3. Commit\n\n```bash\ngit commit -m \"Initial commit\"      # commit the changes with a message\n\n# or\n\ngit commit -a -m \"Initial commit\"   # auto commit skipping the staging area \n```\n\n:::{.callout-tip}\nAlways include a message when committing. A suggested format is \"verb\" + \"subject\"\n:::\n\n4. Ignore\n\n```bash\ncat .gitignore\n*.err       # ignore all the logs on errors\nbuild/      # ignore the build directory\n```\n\nYou can edit the `.gitignore` file at anytime. \n\n5. Status and History\n\nYou can check the git status using,\n\n```bash\ngit status      # Shows you the current git status \ngit log         # Shows you the git history\n```\n\n6. Removing files\n\n```bash\ngit rm Makefile\n```\nThis removes the `Makefile` from Git but not from the directory.\n\n7. Undo\n\n```bash\ngit commit --amend              # amend the current change to the previous commit\ngit restore --staged README.md  # unstage a staged file\ngit restore READE.md            # discard changes in working directory. \n```\n\n## Manage remote repos\n\n1. Git clone \n\n```bash\ngit clone https://github.com/JulianTao/chgpu_agave_template\n```\n\nThis will clone the github repo `JulianTao/chgpu_agave_template` to your local machine. \n\nThe local repo will have the same name as the remote, but can be modified later. \n\n2. Check remotes\n\n```bash\ngit remote\n```\n\nThis will show which remote servers you have configured. \n\nIf you run `git remote` in side the local repo, you see that a default git name `origin` is assigned to the remote repo.\n\nNow if you run `git remote get-url origin`, you will see the url associated with this remote repo.\n\nAlternatively, run `git remote -v`, you see the urls for `fetching` and `pushing` actions.\n\n3. Add remote repos\n\n```bash\ngit remote add <shortname> <url>\n```\n\nThis will add a new remote explicitly with the specified `shortname` and `url`. The `shortname` can be used latter in lieu of the whole URL, for example `git fetch shortname`. This is useful when collaborating.\n\nIf you need to change the url of a remote, you can use, \n\n```bash\ngit remote set-url <url>\n```\n\n4. Fetching and Pulling from the remotes\n\n```bash\ngit fetch <remote>\n```\nThis command will pulls down all the data from the remote project that you don't have yet. You can then merge in any branches from that remote.\n\nAlternatively, if your current branch is set up to track a remote branch, you can use `git pull` to automatically **fetch and then merge** that remote branch into your current branch.\n\n5. Pushing from local branch to remotes\n\n```bash\ngit push <remote> <branch> \n```\nWith this command, you can share your local branch by `pushing` it to the remote. You need to specify the `remote` and `branch` that you want to push to. You also need to have the `write` access to the remote.\n\n6. Renaming and Removing remotes\n\n```bash\ngit remote rename <oldname> <newname>       # rename a remote from <oldname> to <newname>\n```\n\n```bash\ngit remote remove <shortname>               # remote the remote <shorname>\n```\n\n## Collaborate using Github\n\nThere are many git workflows. An example is the [Github Workflow](https://guides.github.com/introduction/flow/).\n\n![Github Flow](./media/Github_flow.png)\n\nAnother popular one is the [git-flow](https://nvie.com/posts/a-successful-git-branching-model/)\n\n![git-flow](https://nvie.com/img/git-model@2x.png)\n\nYet another valuable reference is this comparison [Git-workflow vs feature branching](https://gist.github.com/blackfalcon/8428401)\n\n## Configure your local git to simplify the workflow\n\n   * [Create a personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\n\n```bash\ngit clone https://github.com/username/repo.git\nUsername: your_username\nPassword: your_token\n```\n\n   * [Store your GitHub credentials in Git](https://git-scm.com/docs/git-credential-store)\n\n```bash\ngit config --global credential.helper store\n```\n\n   * [Pulling via rebase](https://www.atlassian.com/git/tutorials/syncing/git-pull)\n\n```bash\ngit config --global branch.autosetuprebase always\n```\n\n\n## Further reading\n\n::: {#refs}\n:::\n"},"formats":{"html":{"execute":{"fig.width":7,"fig.height":5,"fig.format":"retina","fig.dpi":96,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","code-fold":"none","code-summary":"Code","code-overflow":"scroll","code-link":false,"code-tools":false,"merge-includes":true,"self-contained-math":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"from":"markdown","standalone":true,"to":"html","css":["styles.css"],"toc":true,"output-file":"git.html"},"metadata":{"theme":"cosmo","title":"Git Basics","bibliography":["Workflow.bib"],"nocite":"@Atl; @Atl, @zotero-2955, @zotero-2951, @zotero-2954, @zotero-2952  \n"},"extensions":{"book":{"multiFile":true}}}}}