[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workflow for the BiG group",
    "section": "",
    "text": "Note\n\n\n\nThis is a work in progress. Suggestions and contributions are welcome! Please open an issue if you have questions, open a PR if you think your branch is ready to be merged.\n\n\n\nSource Version Control\nData Archiving\nDocumentation\nKnowledge Mangement\nLab Management\nUsing Agave\n\nRC documentation\nUsing Template Project\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Suggested workflow for the BiG research group.\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "objectID": "git.html#manage-local-repo",
    "href": "git.html#manage-local-repo",
    "title": "Version control using Git and GitHub: the basics",
    "section": "Manage local repo",
    "text": "Initiate\n\ncd /somedir   # navigate to the directory that you want to create the repo\ngit init      # Initiate the git repo\nThis creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.\n\nStarting tracking files or Staging modified files\n\ngit add somefile  # start tracking some files\n\n# or\n\ngit add --all     # start tracking all files in the directory\n\nCommit\n\ngit commit -m \"Initial commit\"      # commit the changes with a message\n\n# or\n\ngit commit -a -m \"Initial commit\"   # auto commit skipping the staging area \n\n\n\n\n\n\nTip\n\n\n\nAlways include a message when committing. A suggested format is “verb” + “subject”\n\n\n\nIgnore\n\ncat .gitignore\n*.err       # ignore all the logs on errors\nbuild/      # ignore the build directory\nYou can edit the .gitignore file at anytime.\n\nStatus and History\n\nYou can check the git status using,\ngit status      # Shows you the current git status \ngit log         # Shows you the git history\n\nRemoving files\n\ngit rm Makefile\nThis removes the Makefile from Git but not from the directory.\n\nUndo\n\ngit commit --amend              # amend the current change to the previous commit\ngit restore --staged README.md  # unstage a staged file\ngit restore READE.md            # discard changes in working directory."
  },
  {
    "objectID": "git.html#manage-remote-repos",
    "href": "git.html#manage-remote-repos",
    "title": "Version control using Git and GitHub: the basics",
    "section": "Manage remote repos",
    "text": "Git clone\n\ngit clone https://github.com/JulianTao/chgpu_agave_template\nThis will clone the github repo JulianTao/chgpu_agave_template to your local machine.\nThe local repo will have the same name as the remote, but can be modified later.\n\nCheck remotes\n\ngit remote\nThis will show which remote servers you have configured.\nIf you run git remote in side the local repo, you see that a default git name origin is assigned to the remote repo.\nNow if you run git remote get-url origin, you will see the url associated with this remote repo.\nAlternatively, run git remote -v, you see the urls for fetching and pushing actions.\n\nAdd remote repos\n\ngit remote add <shortname> <url>\nThis will add a new remote explicitly with the specified shortname and url. The shortname can be used latter in lieu of the whole URL, for example git fetch shortname. This is useful when collaborating.\nIf you need to change the url of a remote, you can use,\ngit remote set-url <url>\n\nFetching and Pulling from the remotes\n\ngit fetch <remote>\nThis command will pulls down all the data from the remote project that you don’t have yet. You can then merge in any branches from that remote.\nAlternatively, if your current branch is set up to track a remote branch, you can use git pull to automatically fetch and then merge that remote branch into your current branch.\n\nPushing from local branch to remotes\n\ngit push <remote> <branch> \nWith this command, you can share your local branch by pushing it to the remote. You need to specify the remote and branch that you want to push to. You also need to have the write access to the remote.\n\nRenaming and Removing remotes\n\ngit remote rename <oldname> <newname>       # rename a remote from <oldname> to <newname>\ngit remote remove <shortname>               # remote the remote <shorname>"
  },
  {
    "objectID": "git.html#collaborate-using-github",
    "href": "git.html#collaborate-using-github",
    "title": "Version control using Git and GitHub: the basics",
    "section": "Collaborate using Github",
    "text": "There are many git workflows. An example is the Github Workflow.\n\n\n\nGithub Flow\n\n\nAnother popular one is the git-flow\n\n\n\ngit-flow\n\n\nYet another valuable reference is this comparison Git-workflow vs feature branching"
  },
  {
    "objectID": "git.html#configure-your-local-git-to-simplify-the-workflow",
    "href": "git.html#configure-your-local-git-to-simplify-the-workflow",
    "title": "Version control using Git and GitHub: the basics",
    "section": "Configure your local git to simplify the workflow",
    "text": "Create a personal access token\n\ngit clone https://github.com/username/repo.git\nUsername: your_username\nPassword: your_token\n\nStore your GitHub credentials in Git\n\ngit config --global credential.helper store\n\nPulling via rebase\n\ngit config --global branch.autosetuprebase always"
  },
  {
    "objectID": "git.html#further-reading",
    "href": "git.html#further-reading",
    "title": "Version control using Git and GitHub: the basics",
    "section": "Further reading",
    "text": "Atlassian. n.d. “Learn Git- Git Tutorials, Workflows and Commands | Atlassian Git Tutorial.” Atlassian. https://www.atlassian.com/git.\n\n\n“Git - Book.” n.d. https://git-scm.com/book/en/v2.\n\n\n“Git - the Simple Guide - No Deep Shit!” n.d. https://rogerdudler.github.io/git-guide/.\n\n\n“Git Handbook \\(\\cdot\\) GitHub Guides.” n.d. https://guides.github.com/introduction/git-handbook/.\n\n\n“Learn Git with Bitbucket Cloud | Atlassian Git Tutorial.” n.d. https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud."
  },
  {
    "objectID": "gd.html#google-drive",
    "href": "gd.html#google-drive",
    "title": "Data Archiving using Google Drive",
    "section": "Google Drive",
    "text": "ASU provides unlimited google drive storage to all the students and faculty members.\nWe can leverage this opportunity to archive our group research data.\n\n\n\n\n\n\nSource vs Data\n\n\n\nFor source files, we use git mainly for version control purposes. Also, the source files are usually small in size, and github is sufficient for storage.\nFor data files, we use googledrive for archiving purposes. Also, the data files are usually large in size, and googledrive is perfect for this.\n\n\n\nGeneral principles\n\nFor each project, create a subfolder in the shared google drive.\nThe subfolder should have a concise but indicative name, for example, jtao-rotation1\nCreate sub-subfolders as necessary\nInclude a README file to briefly introduce the background of the data and the structure of the data; also in the README file, include a link to the git repo of the source files.\n…\n\n\n\nFor use with the cluster\n\nFollow the instructions from Research Computing to configure your rclone on agave and link rclone to the group shared google drive.\nInclude a line of rclone copy command in the batch file (as shown in the template), and follow the instructions to automate the archiving process immediately after your simulation is completed.\nIf you prefer to use GUI, you can use Globus.\n\n\n\nFor use outside of the cluster\n\nArchive early, archive often.\nFollow the general principles."
  },
  {
    "objectID": "agave-template.html#a-template-chronogpu-project-to-run-on-agave",
    "href": "agave-template.html#a-template-chronogpu-project-to-run-on-agave",
    "title": "BiG Workflow",
    "section": "A template ChronoGPU project to run on Agave",
    "text": "GitHub repo: chgpu_agave_template\n\nTo test run the template project on Agave\n\n\n\n\n\n\nWarning\n\n\n\nIn order to use the google drive and git as instructed, you need to update your personal configure files for rclone and git on the cluster first.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you prefer to use GUI tools for git operations, neglect the corresponding command line instructions below and go ahead and use the GUI tools you are familiar with. Do note that using the command line could potentially streamline your workflow and improve your efficiency further.\n\n\n\nLogon to the Agave cluster\n\nssh your.username@asu.agave.edu\n\nNavigate to your workspace\nFor example,\n\ncd Workspace/Chrono\n\nYour working directory may be different from mine. It is recommended to have a directory called something like “Workspace” in your home directory to host all your projects\n\n\nClone this repo\n\ngit clone https://github.com/JulianTao/chgpu_agave_template.git\n\nNavigate to the new directory\n\ncd chgpu_agave_template\n\nExamine the directory structure\n\nls -al\nIt includes:\n\na CMakeList.txt\na bash file to be run by sbatch\na .gitignore file to ignore the output and log files for git operations\nsource files\n\nrepose.cpp\nGpuDemoUtils.hpp\nrepose.json\n\n\n\nEdit repose.sh if needed, following the instructions inside\nRun the bash file\n\nsbatch repose.sh\n\nExamine the OUTPUT directory and the log files .err and .out.\nExamine the shared google drive, there should be a new folder data folder with the name specified in the bash script.\n\n\n\nTo create your own project based on the template\n\n\n\n\n\n\nWarning\n\n\n\nIn order to use git as instructed below, you need to configure git first on your computer.\n\n\n\nOn GitHub, navigate to the main page of the repository. chgpu_agave_template\nAbove the file list, click Use this template, which usually appears in green.\nType a name for your repository, and an optional description. The project name should be concise but indicative, e.g., “sample_prep”. For a more comprehensive instruction on how to create a repo from a template, check here\n\n\n\n\n\n\n\nNote\n\n\n\nInstead of using “template”, you can also “fork” the repo and then update the settings such as repo name etc. There are some differences though, as discussed here\n\n\n\nOn your own computer, clone the new repo.\nRename the cpp,json, sh files with your project name. For example, repose.cpp –> sample_prep.cpp; repose.json –> sample_prep.json; and repose.sh –> sample_prep.json\nEdit the source cpp and json files for your project.\nUpdate the CMakeList.txt file:\nReplace the word repose with your project name.\nFor example, change\n\nset(MY_PROJECT repose)\nto\nset(MY_PROJECT sample_prep)\n\nUpdate the repose.sh file\n\n\nSearch and replace all instances of repose with your project name, e.g., sample_prep\nUpdate the slurm requests as shown in the example bash script.\n\n\nCommit the changes and push to the github repo.\n\ngit add --all\ngit commit -m 'update to sample_prep'\ngit push\n\nRepeat the steps the same as in the “test run” example above, except that you work on the new project repo.\nCongratulations, you run your first ChronoGPU project on Agave."
  },
  {
    "objectID": "knowledge.html#managing-literature-using-zotoro",
    "href": "knowledge.html#managing-literature-using-zotoro",
    "title": "Knowledge Management",
    "section": "Managing literature using Zotoro",
    "text": ""
  },
  {
    "objectID": "knowledge.html#note-taking",
    "href": "knowledge.html#note-taking",
    "title": "Knowledge Management",
    "section": "Note taking",
    "text": ""
  },
  {
    "objectID": "documentation.html#rmarkdown",
    "href": "documentation.html#rmarkdown",
    "title": "Documentation and Reporting",
    "section": "Rmarkdown",
    "text": "Rmarkdown Cookbook\nBiG Rmarkdown Templates"
  },
  {
    "objectID": "documentation.html#quarto",
    "href": "documentation.html#quarto",
    "title": "Documentation and Reporting",
    "section": "Quarto",
    "text": "Quarto Documentation"
  },
  {
    "objectID": "lab.html#standard-operation-procedures",
    "href": "lab.html#standard-operation-procedures",
    "title": "Labwork and Management",
    "section": "Standard Operation Procedures",
    "text": ""
  },
  {
    "objectID": "lab.html#inventory",
    "href": "lab.html#inventory",
    "title": "Labwork and Management",
    "section": "Inventory",
    "text": ""
  }
]