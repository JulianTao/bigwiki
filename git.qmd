---
title: "Git Basics"
bibliography: Workflow.bib
nocite: |
  @Atl; @Atl, @zotero-2955, @zotero-2951, @zotero-2954, @zotero-2952  
---

Git is a distributed version control system. With Git, every developer has the full history of the code repo locally. Github is an Internet host for git repos. Similar hosts include Gitlab, Bitbucket, Gitbucket; and there are many more.

As we transition to fully open-source programming, with the source mainly consisting of text files, git and github becomes critically important. 


## Manage local repo

1. Initiate

```bash
cd /somedir   # navigate to the directory that you want to create the repo
git init      # Initiate the git repo
```
This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.

2. Starting tracking files or Staging modified files

```bash
git add somefile  # start tracking some files

# or

git add --all     # start tracking all files in the directory
```


3. Commit

```bash
git commit -m "Initial commit"      # commit the changes with a message

# or

git commit -a -m "Initial commit"   # auto commit skipping the staging area 
```

:::{.callout-tip}
Always include a message when committing. A suggested format is "verb" + "subject"
:::

4. Ignore

```bash
cat .gitignore
*.err       # ignore all the logs on errors
build/      # ignore the build directory
```

You can edit the `.gitignore` file at anytime. 

5. Status and History

You can check the git status using,

```bash
git status      # Shows you the current git status 
git log         # Shows you the git history
```

6. Removing files

```bash
git rm Makefile
```
This removes the `Makefile` from Git but not from the directory.

7. Undo

```bash
git commit --amend              # amend the current change to the previous commit
git restore --staged README.md  # unstage a staged file
git restore READE.md            # discard changes in working directory. 
```

## Manage remote repos

1. Git clone 

```bash
git clone https://github.com/JulianTao/chgpu_agave_template
```

This will clone the github repo `JulianTao/chgpu_agave_template` to your local machine. 

The local repo will have the same name as the remote, but can be modified later. 

2. Check remotes

```bash
git remote
```

This will show which remote servers you have configured. 

If you run `git remote` in side the local repo, you see that a default git name `origin` is assigned to the remote repo.

Now if you run `git remote get-url origin`, you will see the url associated with this remote repo.

Alternatively, run `git remote -v`, you see the urls for `fetching` and `pushing` actions.

3. Add remote repos

```bash
git remote add <shortname> <url>
```

This will add a new remote explicitly with the specified `shortname` and `url`. The `shortname` can be used latter in lieu of the whole URL, for example `git fetch shortname`. This is useful when collaborating.

If you need to change the url of a remote, you can use, 

```bash
git remote set-url <url>
```

4. Fetching and Pulling from the remotes

```bash
git fetch <remote>
```
This command will pulls down all the data from the remote project that you don't have yet. You can then merge in any branches from that remote.

Alternatively, if your current branch is set up to track a remote branch, you can use `git pull` to automatically **fetch and then merge** that remote branch into your current branch.

5. Pushing from local branch to remotes

```bash
git push <remote> <branch> 
```
With this command, you can share your local branch by `pushing` it to the remote. You need to specify the `remote` and `branch` that you want to push to. You also need to have the `write` access to the remote.

6. Renaming and Removing remotes

```bash
git remote rename <oldname> <newname>       # rename a remote from <oldname> to <newname>
```

```bash
git remote remove <shortname>               # remote the remote <shorname>
```

## Collaborate using Github

There are many git workflows. An example is the [Github Workflow](https://guides.github.com/introduction/flow/).

![Github Flow](./media/Github_flow.png)

Another popular one is the [git-flow](https://nvie.com/posts/a-successful-git-branching-model/)

![git-flow](https://nvie.com/img/git-model@2x.png)

Yet another valuable reference is this comparison [Git-workflow vs feature branching](https://gist.github.com/blackfalcon/8428401)

## Configure your local git to simplify the workflow

   * [Create a personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)

```bash
git clone https://github.com/username/repo.git
Username: your_username
Password: your_token
```

   * [Store your GitHub credentials in Git](https://git-scm.com/docs/git-credential-store)

```bash
git config --global credential.helper store
```

   * [Pulling via rebase](https://www.atlassian.com/git/tutorials/syncing/git-pull)

```bash
git config --global branch.autosetuprebase always
```


## Further reading

::: {#refs}
:::
